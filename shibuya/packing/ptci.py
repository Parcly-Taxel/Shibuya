"""
Packings of points (or equivalently circles) into a unit circle
maximising the minimum separation d. Each function below returns
a pair (d, sequence of points).
Cf. https://erich-friedman.github.io/packing/cirincir
and http://hydra.nat.uni-magdeburg.de/packing/cci/cci.html
"""
from mpmath import *
from shibuya.draw import drawing
from shibuya.generators import cu

def thas(t):
    """Given t = tan(x/2), return the point on the unit circle
    (cos(x), sin(x))."""
    return mpc((1-t)*(1+t),2*t) / (1+t*t)

def psmall(n):
    if n > 9:
        return None
    centre = n > 6
    m = n-centre
    d = 2*sinpi(fraction(1,m))
    points = unitroots(m)
    if centre:
        points.append(0)
    return (d, points)

"""
option(prot); LIB "elim.lib";
ring r=(0,s),(v,u,t,a,d),dp; minpoly=s2-3;
ideal I=(1-t2)-(s*d/2+a)*(1+t2),4t-d*(1+t2),
        d2*(1+u2)-4u2,(1-v2-(a-d)*(1+v2))^2+4v2-d2*(1+v2)^2,
        v*(1-(3tu+3u2)+tu3)-((t+3u)-(u3+3tu2));
I=sat(I,d*(d2-2)*(d6+(s-10)*d4+(-7s+32)*d2+(12s-31)))[1];
poly pd=elim(I,tuva)[1];
pd;
"""
def p10():
    s = sqrt(3)
    up = [[0, 1], [-2, -2], [2, 1], [8, 8], [-8, 11], [-6, -6], [6, -5]]
    ap = [[0, 1], [1, -14], [-12, 76], [53, -201], [-104, 265], [82, -151], [-8, 14]]
    u = polyroots([polyval(z, s) for z in up], extraprec=50)[0]
    d = 2*u / hypot(1,u)
    a = sqrt(polyroots([polyval(z, s) for z in ap], extraprec=50)[1])
    zu = thas(u)
    return (d, [zu**(k/2) for k in range(-7,8,2)] + [a, a-d])

def p11():
    d = 2*sinpi(fraction(1,9))
    points = unitroots(9)
    z = mpc(re(2*points[3]-points[4]),im(points[4]))
    points += [z, conj(z)]
    return (d, points)

"""
option(prot); LIB "elim.lib";
ring r=(0,s),(u,d),dp; minpoly=s2-3;
ideal I=d2*(1+u2)-4u2,((1-u2)-(1+u2)*d/(2s))^2+(2u-(1+u2)*d/2)^2-d2*(1+u2)^2;
I=sat(I,d+s)[1];
poly pd=elim(I,u)[1];
pd;
"""
def p12():
    s = sqrt(3)
    d = polyroots([1, -5, 7, 0, -27, 27])[1] / s
    zu = thas(sqrt((2/d)**2 - 1))
    points = [u*z for u in unitroots(3) for z in (-1, d/s, zu, conj(zu))]
    return (d, points)

def p13():
    d = 2*sinpi(fraction(1,10))
    points = unitroots(10) + [0.35, -0.22+0.32j, -0.22-0.32j]
    return (d, points)

"""
option(prot); LIB "elim.lib";
ring r=(0,s),(w,v,u,t,c,b,a,d),dp; minpoly=s2-3;
ideal I=d2*(1+t2)-4t2,(1-u2)-(s*d/2+a)*(1+u2),2u-d/2*(1+u2),
        c2+((a-b)/2)^2-d2,
        ( ((a+b)/2*(1+v2)-(1-v2))^2+(c*(1+v2)-(2v))^2-(d*(1+v2))^2 ) / (1+v2),
        ( (b*(1+w2)-(1-w2))^2+(2w)^2-(d*(1+w2))^2 ) / (1+w2),
        v*(1-(t2+2tu))-((2t+u)-t2u),
        w*(1-(t2+2tv))-((2t+v)-t2v);
poly pd=elim(I,wvutcba)[1];
"""
def p14():
    tp = [1240029, 8148762, 8444007, -47475396, -98474049, 107193618, 346191165, -99412272, -613361646, 3630420, 586703574, 27276264, -310427154, -4021164, 90370890, -1870128, -13879647, 233874, 1143027, 5436, -48189, -870, 841]
    with extraprec(100):
        s = sqrt(3)
        t = polyroots(tp, extraprec=100)[4] * s
        d = 2*t / hypot(1,t)
        zt = thas(t)
        a = re(sqrt(zt)) - s*d/2
        c = cu(a, zt**2.5, d, d)
        b = 2*re(c) - a
    return (d, [zt**(k/2) for k in range(-9,10,2)] + [a, b, c, conj(c)])

def p15():
    h = 0.5 / tan(pi/5) + 1
    d = 1 / hypot(h,0.5)
    z = mpc(h,0.5) * d
    points = [u*y for u in unitroots(5) for y in (z, conj(z), z-d)]
    return (d, points)

"""
option(prot); LIB "elim.lib";
ring r=0,(v,u,t,z,c,b,a,d),dp;
ideal I=d2*(1+t2)-4t2,
        ( (a*(1+t2)-(1-t2))^2+(d/2*(1+t2)-(2t))^2-d2*(1+t2)^2 ) / (1+t2),
        ( (b*(1+u2)-(1-u2))^2+(c*(1+u2)-(2u))^2-d2*(1+u2)^2 ) / (1+u2),
        ( (z*(1+v2)-(1-v2))^2+(2v)^2-d2*(1+v2)^2 ) / (1+v2),
        (a-b)^2+(d/2-c)^2-d2,
        (b-z)^2+c2-d2,
        u*(1-3t2)-(3t-t3),
        v*(1-(t2+2tu))-((2t+u)-t2u);
poly pd=elim(I,vuzcbad)[1];
pd;
"""
def p16():
    tp = [1, -272, 23836, -1397968, 61877018, -1832852704, 100250166524, -5933503690896, 343618577806431, -15506223302910864, 478597898514188824, -9987956341130591520, 39644411397735515324, 7456150263036019977024, -399544426297736524468360, 13367417478759911874287328, -323702791171784634206971165, 5073130121815057794051383568, 4735680661452847367072030204, -3944489891779785513462064706384, 179895187529114782153736234699186, -5611514352144222539497409498189024, 140239638902416305461432931891577468, -2944095140757079037367381498192768656, 52943011022847818150208248086817199821, -823030208864913014858169893856598330096, 11108698333250824114063747410586996893664, -130471119820784503514463128366665515735936, 1335647991477347263516843248466032247408592, -11941221029982336114865129212022126948680960, 93477411684514624002223386402555378032952608, -642769836248032571283243505128341281851240320, 3896602517137369340205098400433878438049182426, -20907822407013540595055910612727024885581575328, 99696295101997764042350679368063440489413234744, -424169139524619871131667373964348477499689611680, 1616501518700950627624468320874667078592315422420, -5538524353359130293761561935228501941165101045184, 17119705432767237344509842270815599611076015640696, -47893476672971641307344337722789490278970230269728, 121622707481502991681392580606093740883443078525286, -281111674378501362997195548262694463223652214628256, 592825983966127758721523281184013593549165264297744, -1143176769150421795884839637937522079540728332191936, 2019725781552543030549545835785192528044180876153320, -3275119308989499420945508846613564728162312519393408, 4881965880640497168242203647111994662569881422704976, -6698742817312326633228695852939040094430981616145600, 8471259150799614604750904899003955634104810484229078, -9883638925066202242533618519958023135154922996245984, 10648700773671401232976339439277920847562773857021400, -10602964639841699865936962149088506573273974525262112, 9763308668760493947008434786043416893346526429005844, -8318515163299712898192914796885022203823560144370880, 6560987473912987566780362901915240062226850653060440, -4792047156303719238132043024936654685668677599293344, 3242022414098176716831289993797983039493302887941386, -2032034326705954441987616445781097149980464851842016, 1180067460499182049798105903503439308310525613857312, -634962748227877315863378449085660761597946729338752, 316536804249781160461225166969617963165819833151952, -146172949905798525033701777565799090096513805434112, 62513068734219061854955015404662231168775390719008, -24750817633511181091790385835163775317973380330368, 9068468108214115584612997839347404410462726592821, -3073036644492141705509884260827595166399806530896, 962505385693123541672131381853103527714405095980, -278416633839052410378615848929994007639625778064, 74307856871586260313653829378362810631048781586, -18278508334031048938514760832735523175066550624, 4138571686964564503186116885156878787611789580, -861208071244806369670603714485738568558294608, 164418591925972255022944668522672765527466923, -28740408966113278049409269984501754438478800, 4588856980195220537326423550921012665976984, -667402036826720081160259840516483045254944, 88134141426927218659949027902468538207164, -10527797729032196662246482692378943162560, 1132505965021354929469593744152776148472, -109136175666019445014955640039223688992, 9362467641003770054332833194934265143, -709579568007752252413904998909337648, 47070296487925914364348869766001836, -2701229435277571137566452316252560, 132117818042098490885452146200890, -5399918452411840827104658375264, 179495318800623819123401451948, -4663884132933228799200685008, 88928830582683002284403385, -1107838979700981601030704, 6774684501078813197376]
    with extraprec(100):
        t = sqrt(findroot(lambda T: polyval(tp, T), (0.0828, 0.0829), method="bisect"))
        d = 2*t / hypot(1,t)
        zt = thas(t)
        a = mpc(re(zt) - sqrt(d**2 - (im(zt)-d/2)**2), d/2)
        b = cu(a, zt**3, d, d)
        c = re(cu(conj(b), b, d, d))
    return (d, [zt**k for k in range(-5,6)] + [a, b, c, conj(a), conj(b)])

def p17():
    pass # TODO

def p18():
    d = 2*sinpi(fraction(1,12))
    points = unitroots(12)
    z = 1 + 1j*(1-points[-1])
    points += [z*u for u in unitroots(6)]
    return (d, points)

def p19():
    dat = p18()
    return (dat[0], dat[1] + [0])

def pn(n):
    """Return the best known point packing in a unit circle
    with the given number of points."""
    if n < 10:
        return psmall(n)
    return eval(f"p{n}()")

def draw_packing(data, outfn, scale=400):
    d, points = data
    res = drawing(scale, (2+d, 2+d), (-(1+d/2), -(1+d/2)))
    res.add_circle(0, 0, 1, {"fill": "none", "stroke": "#000", "stroke-width": 0.005*d})
    for p in points:
        res.add_circle(p.real, p.imag, d/2, {"fill": "#6dc6fb", "fill-opacity": "0.8",
                                             "stroke": "#1c92cd", "stroke-width": 0.005*d})
        res.add_circle(p.real, p.imag, 0.02*d)
    res.add_circle(0, 0, 1+d/2, {"fill": "none", "stroke": "#000", "stroke-width": 0.005*d})
    res.write(outfn)
