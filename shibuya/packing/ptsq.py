"""
Packings of points (or equivalently circles) into a unit square
maximising the minimum separation d. Each function below returns
a pair (d, sequence of points).
Cf. https://erich-friedman.github.io/packing/cirinsqu
and http://hydra.nat.uni-magdeburg.de/packing/csq/csq.html
"""
from mpmath import *

def p2():
    return (sqrt(2), [0, 1+1j])

def p3():
    return (sqrt(6)-sqrt(2), [0, mpc(1,2-sqrt(3)), mpc(2-sqrt(3),1)])

def p4():
    return (1, [0, 1, 1j, 1+1j])

def p5():
    return (sqrt(0.5), [0, 1, 1j, 1+1j, 0.5+0.5j])

def p6():
    return (sqrt(13)/6, [mpc(x/2, y/mpf(3)) for x in (0,1,2) for y in (x%2,2+x%2)])

def p7():
    d = 4 - 2*sqrt(3)
    return (d, [0, d, d*1j, d*(1+1j), mpc(d/2,1), mpc(1,d/2), 0.95+0.95j])

def p8():
    return (sqrt(2 - sqrt(3)), [bp*z + 0.5+0.5j for z in unitroots(4)
                                                for bp in (0.5+0.5j, (1-sqrt(3))/2)])

def p9():
    return (0.5, [mpc(x,y)/2 for x in (0,1,2) for y in (0,1,2)])

"""
from sympy import *
params = symbols("a b y x d")
ideal = (S("x^2+y^2-d^2"),
         S("(2*x+d-1)^2+b^2-d^2"),
         S("a^2+(1-2*y)^2-d^2"),
         S("(a+d-1)^2+(b+d-1)^2-d^2"),
         S("(x-a-d)^2+(y-1+d)^2-d^2"))
GB = groebner(ideal, params, order="lex")
print(GB)
"""
def p10():
    dp = [1180129, -11436428, 98015844, -462103584, 1145811528,
          -1398966480, 227573920, 1526909568, -1038261808, -2960321792,
          7803109440, -9722063488, 7918461504, -4564076288, 1899131648,
          -563649536, 114038784, -14172160, 819200]
    xp = [4833808384, -18292893696, 231089016320, -1126322897408, 2641176117632,
          -3604472915840, 3142380993216, -1893047603328, 926983988992, -469985292736,
          225222946304, -56978206656, -15097884104, 17327716152, -5236535740,
          336548136, 165929282, -38942194, 2584905]
    d = polyroots(dp, extraprec=50)[0]
    x = polyroots(xp, extraprec=50)[4]
    y = sqrt(d*d - x*x)
    a = sqrt(d*d - (1-2*y)**2)
    b = sqrt((1-2*x) * (2*(d+x)-1))
    return (d, [mpc(*z) for z in ((0,0), (x,y), (2*x,0), (0,2*y), (2*x+d,0),
                                  (a,1), (a+d,1), (1,b), (1,b+d), (a+d,1-d))])

def p11():
    d = polyroots([1, 8, -22, 20, 18, -24, -24, 32, -8])[1]
    x = polyroots([16, -32, 16, 8, -7])[1] * d
    y = polyroots([16, -32, 16, -8, 1])[1] * d
    return (d, [mpc(*z) for z in ((0,0), (0,d), (d,0), (1,1), (1-sqrt(2)*d,1), (1,1-sqrt(2)*d),
                                  (1-d/sqrt(2),1-d/sqrt(2)), (x,y), (y,x), (0.91,0.025), (0.025,0.91))])

def p12():
    return (sqrt(34)/15, [mpc(fraction(x,3), fraction(y+x%2,5))
                          for x in (0,1,2,3) for y in (0,2,4)])
"""
dd[12] = sqrt(34) / 15
pd[12] = [[a / 3, b / 5] for a in range(4) for b in range(6) if (a + b + 1) % 2]

coef13d = [5322808420171924937409, 586773959338049886173232, 13024448845332271203266928, -12988409567056909990170432, -66972175395892949739372512, -271451157211281654252175360, 1438322342979585076139742976, -335429895467663916497996800, -6543699259726848821592216832, 9441371361011345362166468608, 10182180602633501397232254976, -42246019864541071922661621760, 37620100408876038921186476032, 28699095956807539331396009984, -102587608293645346411004952576, 103509313296807875445571190784, -23909360523055293307841740800, -62735581440162634955836358656, 88454871551963142041952583680, -53012494559549527012040245248, 2135173605242212884072628224, 26378985900767549703436894208, -26497225761631816480192462848, 12731474183761933022491836416, -398432339928038268662185984, -4422001291286852186186711040, 3658751900977247115934695424, -1429726216634427968279543808, 57770773621828718826618880, 275582370688699861317976064, -171632310725283375512289280, 46974915155899860050247680, 1760067432596599241441280, -7491112055212411797372928, 3652998504696614282592256, -1072642406499215430647808, 217086289997205686190080, -30811405631471617048576, 2960075719794736758784, -174103532094609162240, 4756927106410086400]
coef13x = [12919836023125454544371712, -562396283313119477264351232, 461153550526547539159941120, 77878710909077467336605794304, -1043453634267540074841568235520, 7947424223513178928738602946560, -43313080233412653452770932885504, 183653161475101711777449283282944, -633175207300068212117757945256960, 1825688358775964122006678690316288, -4490948667355157030344664350178304, 9563732793171108510983487561904128, -17826361372491332655754144079509248, 29323382339510269332119343273624320, -42829175157585979783020519399210624, 55795740991430946808694196643193728, -65046413835741393424062626870253184, 68015948949990645543018922943168064, -63888622778397691974963031569454496, 53954269394926664658060693485213088, -40974287651770848250605710580579952, 27971355198119917470902902530981632, -17147591535746945075393634033154992, 9424956294479766212683614964894272, -4633973528315924957092730828591452, 2032029362518469067607792967395980, -791746028956180930135082621445906, 272871920398315369262310942617582, -82748168475027968673730056676941, 21950372454831969168183986894876, -5063402327296130174728346025400, 1010952797426780965885811012150, -174594664127407920876501464383, 26301316121270143432234542948, -3534688783200750788275543914, 437237633162852722295646826, -50244402736213242800576507, 5103403148855600103451700, -410701995208015663616284, 22260673337813701909650, -593026206019408258125]
d13 = newton(coef13d, 0.366)
x13 = newton(coef13x, 0.317)
y13_4 = sqrt(d13 ** 2 - x13 ** 2)
y13_3 = sqrt(d13 ** 2 - (1 - 2 * x13) ** 2)
y13_7 = y13_3 + d13
y13_9 = (1 + y13_7) / 2
x13_9 = 1 - sqrt(d13 ** 2 - ((1 - y13_7) / 2) ** 2)
y13_10 = 2 * y13_4 + d13
x13_12 = sqrt(d13 ** 2 - (1 - y13_10) ** 2) + d13
x13_6 = 1 + (x13_9 - 1) / 2 - sqrt(3) * (1 - y13_7) / 4
y13_6 = y13_7 + sqrt(3) * (x13_9 - 1) / 2 + (1 - y13_7) / 4
dd[13] = d13
pd[13] = [[0, 0], [x13, y13_4], [2 * x13, 0], [0, 2 * y13_4], [1, y13_3], [0, y13_10], [0.37, 0.64],
          [1, y13_7], [1, 1], [x13_9, y13_9], [x13_6, y13_6], [x13_12, 1], [x13_12 - d13, 1]]

d14 = 2 * (4 - sqrt(3)) / 13
dd[14] = d14
pd[14] = ([[a * d14, b * d14] for a in range(3) for b in range(3)] +
         [[d14 / 2, 1], [1, d14 / 2], [1, 3 * d14 / 2], [3 * d14 / 2, 1], [0.965, 0.965]])

d15 = (1 + sqrt(2) - sqrt(3)) / 2
dd[15] = d15
l15 = [[0, 0], [0, d15], [d15, 0], [d15, d15], [1, 0], [1, d15], [0, 1], [d15, 1], [1, 1]]
x15_4 = (d15 + 1) / 2
y15_4 = sqrt(d15 ** 2 - ((1 - d15) / 2) ** 2)
l15 += [[x15_4, y15_4], [x15_4, y15_4 + d15], [x15_4, 1 - y15_4], [y15_4, x15_4], [y15_4 + d15, x15_4], [1 - y15_4, x15_4]]
pd[15] = l15

dd[16] = 1 / 3
pd[16] = [[a / 3, b / 3] for a in range(4) for b in range(4)]

coef17d = [1, -4, 6, -14, 22, -20, 36, -26, 5]
d17 = newton(coef17d, 0.306)
dd[17] = d17
l17 = [[0, 0], [d17, 0], [0, d17], [0, 2 * d17], [0, 1],
       [1, 0], [1 - d17, 0], [1, d17], [1, 2 * d17], [1, 1]]
x17_13 = sqrt(d17 ** 2 - (0.5 - d17) ** 2) # = y17_5
l17 += [[x17_13, 0.5 + d17], [1 - x17_13, 0.5 + d17], [0.5, x17_13]]
y17_12 = 0.5 + d17 - sqrt(d17 ** 2 - (0.5 - x17_13) ** 2)
l17 += [[0.5, y17_12]]
y17_8 = (y17_12 + x17_13) / 2
x17_8_out = sqrt(d17 ** 2 - ((y17_12 - x17_13) / 2) ** 2)
l17 += [[0.5 - x17_8_out, y17_8], [0.5 + x17_8_out, y17_8], [0.5, 0.99]]
pd[17] = l17

dd[18] = sqrt(13) / 12
pd[18] = [[a / 4, b / 6] for a in range(5) for b in range(7) if (a + b + 1) % 2]

coef19d = [242, -1430, -8109, 58704, -78452, -2918, 43315, 39812, -53516, 20592, -2704]
d19 = newton(coef19d, 0.290)
dd[19] = d19
v24x, v24y = -sqrt(3) / 2 * d19, d19 / 2
v25x = (1 - sqrt(3) * d19) / 2
v25y = sqrt(d19 ** 2 - v25x ** 2)
l19 = [[0, 0], [1, 0]] + [[sqrt(3) * d19 + a * v24x + b * v25x, a * v24y + b * v25y] for a in range(3) for b in range(3)]
x15 = sqrt(3) * d19 + 2 * v24x + v25x
y15 = 2 * v24y + 3 * v25y
x14 = 2 * v25x - v24x
y14 = d19 + 2 * v25y + v24y
x18 = x15 + sqrt(d19 ** 2 - (1 - y15) ** 2)
x19 = x14 - sqrt(d19 ** 2 - (1 - y14) ** 2)
l19 += [[x14, y14], [x15, y15], [x18, 1], [x19, 1], [0, d19 + 2 * v25y], [1, d19 + 2 * v25y], [0.03, 0.96], [0.97, 0.96]]
pd[19] = l19

dd[20] = (6 - sqrt(2)) / 16
pd[20] = [[a / 4, b * dd[20] + (3 * sqrt(2) - 2) / 16 * (a % 2)] for a in range(5) for b in range(4)]"""
