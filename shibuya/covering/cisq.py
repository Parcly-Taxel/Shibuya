"""
Minimise r in a covering of the unit square ([0,1]^2) by N circles
of radius r. Each function below returns a pair (r, sequence of centres).
Cf. https://erich-friedman.github.io/packing/circovsqu
"""
from mpmath import *
from shibuya.draw import drawing

"""
option(prot); LIB "elim.lib";
ring r=0,(d,c,b,a,q),dp;
ideal I=(b-1)^2+(1-a)^2-4q, (b+1)^2+(1-c)^2-4q,
        (1-d)^2+((a+c)/2)^2-q, (2d+(b-1)/2)^2+((1+a)/2-c)^2-q;
poly p=elim(I,dcb)[1];
ideal J=p,diff(p,a);
factorize(elim(J,a)[1]);
"""
def c6():
    with extraprec(100):
        # do computations in [-1,1]^2 first
        # q in the above Singular code is the square of twice the true radius
        """qp = [7652750400000000, -462638692437120000, 7684558971984365184, -25185207976594837632, 208089139049805572649, -4080729738878024243112, -898781513180040336924, -47934808703378174008512, 270062771501990152391776, -679464800489370704267776, 1348205097896877564955008, -2244260894299112617394176, 3200448947972356249045248, -4090950677420073517967360, 4580849081010915847005184, -4402063265882959771516928, 3602598826360598013280256, -2499164475539090156748800, 1464359708981338615447552, -721916254779404860784640, 297324372247994833567744, -101050474456859069644800, 27791162967940136960000, -5980082696617984000000, 944888407654400000000, -96677396480000000000, 4734976000000000000]"""
        ap = [91125, -1032750, 3215133, -3730104, 26835102, -88193772, -152269482, 1463066376, -4473691009, 10470386878, -34742676657, 82758377744, -120946228812, 188346364120, -285935614684, 469036264400, 493432461667, 914675392238, 898050795435, -839385659736, -736531093682, -806573965228, 135434293926, 1646199179304, 330197531785, 587634225218, -217192902455]
        bp = [202500, 2243700, -979776, -24975108, -46736283, -376112694, -4558183353, -88631594712, 219457514603, -51617245170, 5224174525, 713904244104, -2004346870398, -2377463465868, 4392919245270, 4327477480416, -3338595634678, -1909232528928, -1182645317814, -3510379987428, -876802446679, -537771669246, -202304474605, -71122623912, -13773881865, -2765598114, 192968713]
        cp = [91125, -1215000, 3261303, 15085872, -123819282, 635406624, -3237980286, 14087511312, -47174108545, 116476210504, -245177525763, 311082320864, 31813070100, -635415771776, 818693971244, -427089464800, -145602102749, 486309035000, -467974834047, 190786921968, 497643550, -23286910624, 8380705074, -2301012528, 50188105, 253534424, -50291669]
        dp = [3240000, -49701600, 351690336, -1520922744, 4463508057, -9235855998, 13217268699, -11085796404, -1036741513, 19554865194, -32625066675, 28770101856, -7937952566, -17429166236, 33126767390, -33933462712, 24577246238, -13138494108, 4907769130, -893140616, -319960499, 374099994, -192496233, 67466636, -16724549, 2697298, -214375]
        a = polyroots(ap, extraprec=100)[1]
        b = polyroots(bp, extraprec=100)[2]
        c = polyroots(cp, extraprec=100)[2]
        d = polyroots(dp, extraprec=100)[1]
        z1 = mpc(b+1,a+1) / 2
        z2 = mpc(b-1,c+1) / 2
        z3 = mpc(d,(a-c)/2)
        r = hypot(1-a,1-b) / 4
        centres = [z1, z2, z3, -z1, -z2, -z3]
        centres = [(z+1+1j) / 2 for z in centres]
    return (r, centres)

def cn(n):
    """Return the best known circle covering of a unit square
    with the given number of circles."""
    return eval(f"c{n}()")

def draw_packing(data, outfn, scale=400):
    r, centres = data
    res = drawing(scale)
    res.add_rect(-0.008, -0.008, 1.016, 1.016, {"fill": "#1c92cd"})
    res.add_rect(0, 0, 1, 1, {"fill": "#fff"})
    for c in centres:
        res.add_circle(c.real, c.imag, r, {"opacity": "0.1"})
    res.write(outfn)
